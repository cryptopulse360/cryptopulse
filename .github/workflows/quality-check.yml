name: Quality Check and Comprehensive Testing

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write
  checks: write

concurrency:
  group: 'quality-check-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  comprehensive-testing:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run comprehensive test suite
        run: npm test

      - name: Run type checking
        run: npm run type-check

      - name: Run linting (if available)
        run: npm run lint || echo "Linting not configured, skipping..."

      - name: Build application (full build)
        run: npm run build

      - name: Prepare and validate build files
        run: |
          # Ensure .nojekyll exists for GitHub Pages
          touch ./out/.nojekyll

          # Copy CNAME if it contains a domain (not just comments)
          if grep -q '^[^#]' ./public/CNAME 2>/dev/null; then
            cp ./public/CNAME ./out/CNAME
            echo "✅ Custom domain configured from CNAME file"
          else
            echo "ℹ️ No custom domain configured (using GitHub Pages default)"
          fi

          # Verify build output
          echo "📁 Build output contents:"
          ls -la ./out/

          # Validate essential files exist
          if [ ! -f "./out/index.html" ]; then
            echo "❌ Missing index.html in build output"
            exit 1
          fi

          echo "✅ Build validation completed successfully"

      - name: Upload build artifacts for testing
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  lighthouse-quality-check:
    runs-on: ubuntu-latest
    needs: comprehensive-testing

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build for Lighthouse
        run: npm run build

      - name: Serve built files
        run: |
          npm install -g serve
          serve -s out -p 3000 &
          sleep 5

      - name: Run Lighthouse CI
        run: npx lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports-quality-check
          path: .lighthouseci/
          retention-days: 7

  quality-summary:
    runs-on: ubuntu-latest
    needs: [comprehensive-testing, lighthouse-quality-check]
    if: always()

    steps:
      - name: Quality check summary
        run: |
          echo "📊 Quality Check Summary"
          echo "======================="
          echo ""
          echo "✅ Comprehensive Testing: ${{ needs.comprehensive-testing.result }}"
          echo "✅ Lighthouse Analysis: ${{ needs.lighthouse-quality-check.result }}"
          echo ""
          
          # Check if any jobs failed
          if [[ "${{ needs.comprehensive-testing.result }}" != "success" ]] || \
             [[ "${{ needs.lighthouse-quality-check.result }}" != "success" ]]; then
            echo "❌ Some quality checks failed. Please review the failed jobs above."
            echo ""
            echo "🔧 Troubleshooting tips:"
            echo "- Check individual job logs for specific error details"
            echo "- Run tests locally: npm test"
            echo "- Check type checking: npm run type-check"
            echo "- Test build process: npm run build"
            echo ""
            echo "This workflow provides comprehensive testing for development."
            echo "The fast deployment workflow handles production deployments."
          else
            echo "🎉 All quality checks passed!"
            echo ""
            echo "📋 What was validated:"
            echo "- ✅ All test suites passed"
            echo "- ✅ Type checking completed successfully"
            echo "- ✅ Build process validated"
            echo "- ✅ Lighthouse performance analysis completed"
            echo ""
            echo "This PR maintains code quality standards and is ready for review."
          fi

      - name: Comment on PR with quality results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            
            const testingResult = '${{ needs.comprehensive-testing.result }}';
            const lighthouseResult = '${{ needs.lighthouse-quality-check.result }}';
            
            const allPassed = testingResult === 'success' && lighthouseResult === 'success';
            
            let body = '## 🔍 Quality Check Results\n\n';
            
            if (allPassed) {
              body += '✅ **All quality checks passed!**\n\n';
              body += '### Validated:\n';
              body += '- ✅ Comprehensive test suite\n';
              body += '- ✅ Type checking and build validation\n';
              body += '- ✅ Lighthouse performance analysis\n';
              body += '\n🎉 This PR maintains quality standards and is ready for review!';
            } else {
              body += '❌ **Some quality checks need attention**\n\n';
              body += '### Results:\n';
              body += `- ${testingResult === 'success' ? '✅' : '❌'} Comprehensive Testing: ${testingResult}\n`;
              body += `- ${lighthouseResult === 'success' ? '✅' : '❌'} Lighthouse Analysis: ${lighthouseResult}\n`;
              body += '\n🔧 Please check the workflow logs and address any failing checks.';
              body += '\n\n💡 **Note**: Quality checks help maintain code standards but don\'t block fast deployments to production.';
            }
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body
            });