name: Quality Assurance

on:
  pull_request:
    branches: [main]
  workflow_dispatch:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

permissions:
  contents: read
  pull-requests: write
  checks: write

concurrency:
  group: 'qa-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  comprehensive-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run comprehensive test suite
        run: npm test

      - name: Run accessibility tests
        run: npm run test:accessibility

      - name: Run performance tests
        run: npm run test:performance

      - name: Run color contrast tests
        run: npm run test:contrast

      - name: Build application (full build)
        run: npm run build

      - name: Validate build output
        run: |
          echo "üîç Validating build output..."
          
          # Check if build directory exists
          if [ ! -d "out" ]; then
            echo "‚ùå Build output directory 'out' not found"
            exit 1
          fi
          
          # Check for essential files
          if [ ! -f "out/index.html" ]; then
            echo "‚ùå Main index.html not found in build output"
            exit 1
          fi
          
          # Check for static assets
          if [ ! -d "out/_next" ]; then
            echo "‚ùå Next.js static assets not found"
            exit 1
          fi
          
          # Verify file sizes are reasonable
          BUILD_SIZE=$(du -sh out | cut -f1)
          echo "üìä Build size: $BUILD_SIZE"
          
          # Check for critical pages
          CRITICAL_PAGES=("index.html" "articles.html" "404.html")
          for page in "${CRITICAL_PAGES[@]}"; do
            if [ -f "out/$page" ]; then
              echo "‚úÖ Found critical page: $page"
            else
              echo "‚ö†Ô∏è Missing critical page: $page (may be expected for dynamic routes)"
            fi
          done
          
          echo "‚úÖ Build output validation completed"

      - name: Upload build artifacts for testing
        uses: actions/upload-artifact@v4
        with:
          name: build-output-qa
          path: ./out
          retention-days: 7

  lighthouse-analysis:
    runs-on: ubuntu-latest
    needs: comprehensive-tests
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output-qa
          path: ./out

      - name: Install Lighthouse CI and serve
        run: |
          npm install -g @lhci/cli serve

      - name: Start local server
        run: |
          serve -s out -p 3000 &
          echo $! > server.pid
          sleep 5
          
          # Verify server is running
          curl -f http://localhost:3000 || (echo "‚ùå Server failed to start" && exit 1)
          echo "‚úÖ Local server started successfully"

      - name: Run Lighthouse CI
        run: npx lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Stop local server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi

      - name: Upload Lighthouse reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: .lighthouseci/
          retention-days: 30

  security-audit:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          echo "üîí Running npm security audit..."
          
          # Run npm audit and capture output
          if npm audit --audit-level=moderate; then
            echo "‚úÖ No moderate or higher severity vulnerabilities found"
          else
            echo "‚ö†Ô∏è Security vulnerabilities detected. Please review and update dependencies."
            echo "Run 'npm audit fix' to automatically fix issues where possible."
            # Don't fail the build for audit issues, just warn
          fi

      - name: Check for sensitive files
        run: |
          echo "üïµÔ∏è Checking for sensitive files..."
          
          # Check for common sensitive file patterns
          SENSITIVE_PATTERNS=(
            "*.env"
            "*.key"
            "*.pem"
            "*.p12"
            "*.pfx"
            "*secret*"
            "*password*"
            "id_rsa"
            "id_dsa"
          )
          
          FOUND_SENSITIVE=false
          for pattern in "${SENSITIVE_PATTERNS[@]}"; do
            if find . -name "$pattern" -not -path "./node_modules/*" -not -path "./.git/*" | grep -q .; then
              echo "‚ö†Ô∏è Found potentially sensitive files matching: $pattern"
              find . -name "$pattern" -not -path "./node_modules/*" -not -path "./.git/*"
              FOUND_SENSITIVE=true
            fi
          done
          
          if [ "$FOUND_SENSITIVE" = true ]; then
            echo "‚ùå Sensitive files detected. Please review and remove or add to .gitignore"
            exit 1
          else
            echo "‚úÖ No sensitive files detected"
          fi

  code-quality:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check code formatting
        run: |
          echo "üé® Checking code formatting with Prettier..."
          npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}"

      - name: Analyze bundle size
        run: |
          echo "üì¶ Analyzing bundle size..."
          npm run build:fast
          
          # Check if build output exists
          if [ -d "out" ]; then
            echo "üìä Build output analysis:"
            du -sh out
            
            # Check for large files
            echo "üîç Large files (>1MB):"
            find out -type f -size +1M -exec ls -lh {} \; || echo "No large files found"
            
            # Count total files
            FILE_COUNT=$(find out -type f | wc -l)
            echo "üìÅ Total files: $FILE_COUNT"
          else
            echo "‚ùå Build output not found"
            exit 1
          fi

      - name: Check for TODO/FIXME comments
        run: |
          echo "üìù Checking for TODO/FIXME comments..."
          
          TODO_COUNT=$(grep -r "TODO\|FIXME\|XXX\|HACK" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" | wc -l || echo "0")
          
          if [ "$TODO_COUNT" -gt 0 ]; then
            echo "üìã Found $TODO_COUNT TODO/FIXME comments:"
            grep -r "TODO\|FIXME\|XXX\|HACK" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" -n || true
            echo "‚ÑπÔ∏è Consider addressing these before release"
          else
            echo "‚úÖ No TODO/FIXME comments found"
          fi

  cross-browser-compatibility:
    runs-on: ubuntu-latest
    needs: comprehensive-tests
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output-qa
          path: ./out

      - name: Run cross-browser tests
        run: |
          echo "üåê Running cross-browser compatibility tests..."
          
          # Start local server
          serve -s out -p 3000 &
          SERVER_PID=$!
          sleep 5
          
          # Basic connectivity test
          curl -f http://localhost:3000 || (echo "‚ùå Server not accessible" && exit 1)
          
          # Test critical pages
          PAGES=("/" "/articles" "/about" "/contact")
          for page in "${PAGES[@]}"; do
            echo "Testing page: $page"
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:3000$page")
            if [ "$HTTP_CODE" = "200" ]; then
              echo "‚úÖ Page $page: HTTP $HTTP_CODE"
            else
              echo "‚ö†Ô∏è Page $page: HTTP $HTTP_CODE"
            fi
          done
          
          # Stop server
          kill $SERVER_PID || true
          
          echo "‚úÖ Cross-browser compatibility tests completed"

  final-validation:
    runs-on: ubuntu-latest
    needs: [comprehensive-tests, lighthouse-analysis, security-audit, code-quality, cross-browser-compatibility]
    if: always()
    timeout-minutes: 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Quality assurance summary
        run: |
          echo "üìä Quality Assurance Summary"
          echo "=========================="
          echo ""
          echo "‚úÖ Comprehensive Tests: ${{ needs.comprehensive-tests.result }}"
          echo "‚úÖ Lighthouse Analysis: ${{ needs.lighthouse-analysis.result }}"
          echo "‚úÖ Security Audit: ${{ needs.security-audit.result }}"
          echo "‚úÖ Code Quality: ${{ needs.code-quality.result }}"
          echo "‚úÖ Cross-browser Tests: ${{ needs.cross-browser-compatibility.result }}"
          echo ""
          
          # Check if any jobs failed
          if [[ "${{ needs.comprehensive-tests.result }}" != "success" ]] || \
             [[ "${{ needs.lighthouse-analysis.result }}" != "success" ]] || \
             [[ "${{ needs.security-audit.result }}" != "success" ]] || \
             [[ "${{ needs.code-quality.result }}" != "success" ]] || \
             [[ "${{ needs.cross-browser-compatibility.result }}" != "success" ]]; then
            echo "‚ùå Some quality checks failed. Please review the failed jobs above."
            echo ""
            echo "üîß Troubleshooting tips:"
            echo "- Check individual job logs for specific error details"
            echo "- Run tests locally: npm test"
            echo "- Check linting: npm run lint"
            echo "- Verify type checking: npm run type-check"
            echo "- Test build process: npm run build"
            exit 1
          else
            echo "üéâ All quality assurance checks passed!"
            echo ""
            echo "üìã What was validated:"
            echo "- ‚úÖ All test suites passed"
            echo "- ‚úÖ Type checking completed successfully"
            echo "- ‚úÖ Code linting passed"
            echo "- ‚úÖ Accessibility standards met"
            echo "- ‚úÖ Performance benchmarks achieved"
            echo "- ‚úÖ Security audit completed"
            echo "- ‚úÖ Build process validated"
            echo "- ‚úÖ Cross-browser compatibility verified"
          fi

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            
            // Determine overall status
            const jobs = [
              { name: 'Comprehensive Tests', result: '${{ needs.comprehensive-tests.result }}' },
              { name: 'Lighthouse Analysis', result: '${{ needs.lighthouse-analysis.result }}' },
              { name: 'Security Audit', result: '${{ needs.security-audit.result }}' },
              { name: 'Code Quality', result: '${{ needs.code-quality.result }}' },
              { name: 'Cross-browser Tests', result: '${{ needs.cross-browser-compatibility.result }}' }
            ];
            
            const allPassed = jobs.every(job => job.result === 'success');
            const failedJobs = jobs.filter(job => job.result !== 'success');
            
            let body = '## üîç Quality Assurance Report\n\n';
            
            if (allPassed) {
              body += '‚úÖ **All quality checks passed!**\n\n';
              body += '### Validated:\n';
              body += '- ‚úÖ Comprehensive test suite\n';
              body += '- ‚úÖ Type checking and linting\n';
              body += '- ‚úÖ Accessibility compliance\n';
              body += '- ‚úÖ Performance benchmarks\n';
              body += '- ‚úÖ Security audit\n';
              body += '- ‚úÖ Cross-browser compatibility\n';
              body += '\nüéâ This PR is ready for review and merge!';
            } else {
              body += '‚ùå **Some quality checks failed**\n\n';
              body += '### Failed Checks:\n';
              failedJobs.forEach(job => {
                body += `- ‚ùå ${job.name}: ${job.result}\n`;
              });
              body += '\n### Passed Checks:\n';
              jobs.filter(job => job.result === 'success').forEach(job => {
                body += `- ‚úÖ ${job.name}\n`;
              });
              body += '\nüîß Please check the workflow logs and fix the failing checks before merging.';
            }
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body
            });